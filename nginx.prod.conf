# Redirect HTTP to HTTPS
server {
    listen 80;
    server_name www.fastcomm.com.br fastcomm.com.br;
    return 301 https://www.fastcomm.com.br$request_uri;
}

# HTTPS Server
server {
    listen 443 ssl http2;
    server_name www.fastcomm.com.br;
    
    root /usr/share/nginx/html;
    index index.html;
    
    # SSL Configuration
    ssl_certificate /etc/nginx/ssl/fastcomm.com.br.crt;
    ssl_certificate_key /etc/nginx/ssl/fastcomm.com.br.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # Security Headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' https://www.googletagmanager.com https://connect.facebook.net https://snap.licdn.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https: blob:; media-src 'self'; connect-src 'self' https://www.google-analytics.com https://analytics.google.com; frame-src 'self' https://www.youtube.com;" always;
    add_header Permissions-Policy "camera=(), microphone=(), geolocation=(), payment=(), usb=(), magnetometer=(), gyroscope=(), speaker=(), fullscreen=(), sync-xhr=()" always;
    
    # Gzip Compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        application/atom+xml
        application/javascript
        application/json
        application/ld+json
        application/manifest+json
        application/rss+xml
        application/vnd.geo+json
        application/vnd.ms-fontobject
        application/x-font-ttf
        application/x-web-app-manifest+json
        application/xhtml+xml
        application/xml
        font/opentype
        image/bmp
        image/svg+xml
        image/x-icon
        text/cache-manifest
        text/css
        text/plain
        text/vcard
        text/vnd.rim.location.xloc
        text/vtt
        text/x-component
        text/x-cross-domain-policy;
    
    # Proxy API requests to backend
    location /api/ {
        proxy_pass http://backend:3001/api/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        proxy_buffer_size 4k;
        proxy_buffers 4 32k;
        proxy_busy_buffers_size 64k;
        proxy_temp_file_write_size 64k;
    }
    
    # Handle SPA routing
    location / {
        try_files $uri $uri/ /index.html;
        expires 1h;
        add_header Cache-Control "public, must-revalidate, proxy-revalidate";
    }
    
    # Serve optimized images with format negotiation
    location ~* ^/optimized/(.+)\.(jpg|jpeg|png)$ {
        set $image_path $1;
        set $image_ext $2;
        
        # Try AVIF first
        if ($http_accept ~* "image/avif") {
            try_files /optimized/$image_path.avif @webp_fallback;
        }
        
        # Try WebP
        if ($http_accept ~* "image/webp") {
            try_files /optimized/$image_path.webp @original_fallback;
        }
        
        # Original format fallback
        try_files /optimized/$image_path.$image_ext =404;
        
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary "Accept";
    }
    
    # AVIF fallback location
    location @webp_fallback {
        try_files /optimized/$image_path.webp @original_fallback;
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary "Accept";
    }
    
    # Original format fallback location
    location @original_fallback {
        try_files /optimized/$image_path.$image_ext =404;
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary "Accept";
    }
    
    # Video streaming with range requests
    location ~* \.(mp4|webm|m3u8|ts)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Accept-Ranges bytes;
        
        # Enable video streaming
        mp4;
        mp4_buffer_size 1m;
        mp4_max_buffer_size 5m;
        
        # CORS for video streaming
        add_header Access-Control-Allow-Origin "*";
        add_header Access-Control-Allow-Methods "GET, HEAD, OPTIONS";
        add_header Access-Control-Allow-Headers "Range";
    }
    
    # Cache static assets with proper headers
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|avif|webp)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header X-Content-Type-Options "nosniff" always;
        add_header Vary "Accept-Encoding";
        
        # Enable compression for images
        gzip_static on;
        brotli_static on;
    }
    
    # Allow manifest.json
    location = /manifest.json {
        add_header Content-Type "application/manifest+json";
        expires 1d;
        add_header Cache-Control "public, must-revalidate";
    }
    
    # Allow sitemap.xml
    location = /sitemap.xml {
        add_header Content-Type "application/xml";
        expires 1d;
        add_header Cache-Control "public, must-revalidate";
    }
    
    # Allow robots.txt
    location = /robots.txt {
        add_header Content-Type "text/plain";
        expires 1d;
        add_header Cache-Control "public, must-revalidate";
    }
    
    # Security for sensitive files
    location ~* \.(env|log|sql|yml|yaml)$ {
        deny all;
    }
    
    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
}